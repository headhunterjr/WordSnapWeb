// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WordSnapWeb.Models;

#nullable disable

namespace WordSnapWeb.Migrations
{
    [DbContext(typeof(WordSnapDbContext))]
    [Migration("20250402151724_RemoveDescription")]
    partial class RemoveDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WordSnapWeb.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardsetRef")
                        .HasColumnType("integer")
                        .HasColumnName("cardset_ref");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("WordEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("word_en");

                    b.Property<string>("WordUa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("word_ua");

                    b.HasKey("Id")
                        .HasName("cards_pkey");

                    b.HasIndex("CardsetRef");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("WordSnapWeb.Models.Cardset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("UserRef")
                        .HasColumnType("integer")
                        .HasColumnName("user_ref");

                    b.HasKey("Id")
                        .HasName("cardsets_pkey");

                    b.HasIndex("UserRef");

                    b.ToTable("cardsets", (string)null);
                });

            modelBuilder.Entity("WordSnapWeb.Models.Progress", b =>
                {
                    b.Property<int>("UserRef")
                        .HasColumnType("integer")
                        .HasColumnName("user_ref");

                    b.Property<int>("CardsetRef")
                        .HasColumnType("integer")
                        .HasColumnName("cardset_ref");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_accessed")
                        .HasDefaultValueSql("now()");

                    b.Property<double?>("SuccessRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("success_rate")
                        .HasDefaultValueSql("0.0");

                    b.HasKey("UserRef", "CardsetRef")
                        .HasName("progress_pkey");

                    b.HasIndex("CardsetRef");

                    b.ToTable("progress", (string)null);
                });

            modelBuilder.Entity("WordSnapWeb.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character(24)")
                        .HasColumnName("password_salt")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WordSnapWeb.Models.Userscardset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardsetRef")
                        .HasColumnType("integer")
                        .HasColumnName("cardset_ref");

                    b.Property<int>("UserRef")
                        .HasColumnType("integer")
                        .HasColumnName("user_ref");

                    b.HasKey("Id")
                        .HasName("userscardsets_pkey");

                    b.HasIndex("CardsetRef");

                    b.HasIndex("UserRef");

                    b.ToTable("userscardsets", (string)null);
                });

            modelBuilder.Entity("WordSnapWeb.Models.Card", b =>
                {
                    b.HasOne("WordSnapWeb.Models.Cardset", "CardsetRefNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("CardsetRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cards_cardset_ref_fkey");

                    b.Navigation("CardsetRefNavigation");
                });

            modelBuilder.Entity("WordSnapWeb.Models.Cardset", b =>
                {
                    b.HasOne("WordSnapWeb.Models.User", "UserRefNavigation")
                        .WithMany("Cardsets")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cardsets_user_ref_fkey");

                    b.Navigation("UserRefNavigation");
                });

            modelBuilder.Entity("WordSnapWeb.Models.Progress", b =>
                {
                    b.HasOne("WordSnapWeb.Models.Cardset", "CardsetRefNavigation")
                        .WithMany("Progresses")
                        .HasForeignKey("CardsetRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("progress_cardset_ref_fkey");

                    b.HasOne("WordSnapWeb.Models.User", "UserRefNavigation")
                        .WithMany("Progresses")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("progress_user_ref_fkey");

                    b.Navigation("CardsetRefNavigation");

                    b.Navigation("UserRefNavigation");
                });

            modelBuilder.Entity("WordSnapWeb.Models.Userscardset", b =>
                {
                    b.HasOne("WordSnapWeb.Models.Cardset", "CardsetRefNavigation")
                        .WithMany("Userscardsets")
                        .HasForeignKey("CardsetRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userscardsets_cardset_ref_fkey");

                    b.HasOne("WordSnapWeb.Models.User", "UserRefNavigation")
                        .WithMany("Userscardsets")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userscardsets_user_ref_fkey");

                    b.Navigation("CardsetRefNavigation");

                    b.Navigation("UserRefNavigation");
                });

            modelBuilder.Entity("WordSnapWeb.Models.Cardset", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Progresses");

                    b.Navigation("Userscardsets");
                });

            modelBuilder.Entity("WordSnapWeb.Models.User", b =>
                {
                    b.Navigation("Cardsets");

                    b.Navigation("Progresses");

                    b.Navigation("Userscardsets");
                });
#pragma warning restore 612, 618
        }
    }
}
